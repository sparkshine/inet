%description:

This is a test for SimplifiedRadio interference handling.
The first signal is stronger than the reception threshold.
The second signal is stronger than the reception threshold.
The second signal is not strong enough to cause bit errors.
The first signal is expected to be received correctly.

%file: test.ned

import inet.networklayer.autorouting.ipv4.IPv4NetworkConfigurator;
import inet.nodes.inet.WirelessHost;
import inet.physicallayer.radio.simplified.SimplifiedRadioChannel;

network Test
{
    submodules:
        radioChannel: SimplifiedRadioChannel;
        configurator: IPv4NetworkConfigurator;
        hostSender1: WirelessHost;
        hostSender2: WirelessHost;
        hostReceiver: WirelessHost;
}

%inifile: omnetpp.ini

[General]
network = Test
sim-time-limit = 400us
record-eventlog = true
ned-path = .;../../../../src

**.arpType = "GlobalARP"

**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false
**.mobility.initialY = 500m
**.mobility.initialZ = 0m
*.host*.mobilityType = "StationaryMobility"
*.hostSender1.mobility.initialX = 200m
*.hostSender2.mobility.initialX = 800m
*.hostReceiver.mobility.initialX = 400m

# channel
*.radioChannel.carrierFrequency = 2.4e+9Hz
*.radioChannel.pMax = 1000mW
*.radioChannel.sat = -110dBm
*.radioChannel.alpha = 2

# nic
*.host*.wlan[*].typename = "IdealWirelessNic"
*.host*.wlan[*].bitrate = 2Mbps
*.host*.wlan[*].mac.headerLength = 10B
*.host*.wlan[*].mac.fullDuplex = false
*.host*.wlan[*].radioType = "GenericRadio"
*.host*.wlan[*].radio.thermalNoise = -110dBm
*.host*.wlan[*].radio.sensitivity = -80dBm
*.host*.wlan[*].radio.receptionThreshold = -90dBm
*.host*.wlan[*].radio.setReceptionThreshold = true
*.host*.wlan[*].radio.snirThreshold = 10dB
*.host*.wlan[*].radio.headerLengthBits = 100b
*.host*.wlan[*].radio.bandwidth = 2MHz
*.host*.wlan[*].radio.modulation = "BPSK"
*.hostSender1.wlan[*].radio.transmitterPower = 1000mW
*.hostSender2.wlan[*].radio.transmitterPower = 100mW

# ping app
*.hostSender*.numPingApps = 1
*.hostSender*.pingApp[0].count = 1
*.hostSender*.pingApp[0].printPing = true
*.hostSender*.pingApp[0].destAddr = "hostReceiver"
*.hostSender*.pingApp[0].startTime = 0s

%contains: results/General-0.elog
 - Changing radio reception state from IDLE to RECEIVING.
%contains: results/General-0.elog
 - Passing up contained packet `ping0' to higher layer
%contains: results/General-0.elog
 - Sending datagram `ping0-reply' with dest=10.0.0.1
%#--------------------------------------------------------------------------------------------------------------
%not-contains: stdout
undisposed object:
%not-contains: stdout
-- check module destructor
%#--------------------------------------------------------------------------------------------------------------
